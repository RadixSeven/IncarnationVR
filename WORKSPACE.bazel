# This software is (C) 2022 by Eric David Moyer
# licenced under GPL 3.0 or later. See README.md for more.
workspace(name = "IncarnationVR")

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

# Note: 5376968f6948923e2411081fd9372e71a59d8e77 is the commit sha. Periodically update to the latest to "live at head"
http_archive(
    name = "com_google_googletest",
    sha256 = "199e68f9dff997b30d420bf23cd9a0d3f66bfee4460e2cd95084a2c45ee00f1a",
    strip_prefix = "googletest-5376968f6948923e2411081fd9372e71a59d8e77",
    urls = ["https://github.com/google/googletest/archive/5376968f6948923e2411081fd9372e71a59d8e77.zip"],
)

####
# The below code allows using conan dependencies, however it has two problems:
# 1. You have to build using conan. Conan calls bazel not bazel calls conan. If
#    I were to continue with this, I'd make a gen_rule or some similar Starlark
#    function that accessed the BazelDeps functionality.
# 2. Conan holds onto the file handles when bazel fails. You have to manually
#    kill the appropriate java.exe process in windows Resource Monitor (search
#    for a piece of the hash portion of the path) in order to continue with each
#    failure and that takes a minute or two.
#
# Since I'm only going to need a couple of dependencies (crosses fingers), I'm
# going to try using the bazel native way: building dependencies from source. I'm
# leaving this note in case that takes too long or is otherwise unworkable. Then
# I can try using Conan again.

# Use this if conanfile.py is in ./conandeps
#    load("@//conandeps:dependencies.bzl", "load_conan_dependencies")
# Use this if conanfile.py is in .
load("@//:dependencies.bzl", "load_conan_dependencies")

load_conan_dependencies()

#http_archive(
#    name = "com_valve_openvr",
#    build_file = "com_valve_openvr.BUILD",
#    strip_prefix = "openvr-1.16.8",
#    urls = ["https://github.com/ValveSoftware/openvr/archive/refs/tags/v1.16.8.zip"],
#)
